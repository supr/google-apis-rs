initSidebarItems({"macro":[["map!","This macro is advertised in the documentation, which is why we deliver it as well"]],"mod":[["cmn",""]],"struct":[["AndroidEnterprise","Central instance to access all AndroidEnterprise related resource activities"],["AppRestrictionsSchema","Represents the list of app restrictions available to be pre-configured for the product.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * get app restrictions schema products (response)  "],["AppRestrictionsSchemaRestriction","A restriction in the App Restriction Schema represents a piece of configuration that may be pre-applied.   This type is not used in any activity, and only used as *part* of another schema.  "],["AppRestrictionsSchemaRestrictionRestrictionValue","A typed value for the restriction.   This type is not used in any activity, and only used as *part* of another schema.  "],["Collection","A collection resource defines a named set of apps that is visible to a set of users in the Google Play Store app running on those users' managed devices. Those users can then install any of those apps if they wish (which will trigger creation of install and entitlement resources). A user cannot install an app on a managed device unless the app is listed in at least one collection that is visible to that user.   Note that the API can be used to directly install an app regardless of whether it is in any collection - so an enterprise has a choice of either directly pushing apps to users, or allowing users to install apps if they want. Which is appropriate will depend on the enterprise's policies and the purpose of the apps concerned.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * list collections (none) * patch collections (request|response) * insert collections (request|response) * get collections (response) * delete collections (none) * update collections (request|response)  "],["CollectionDeleteMethodBuilder","Deletes a collection."],["CollectionGetMethodBuilder","Retrieves the details of a collection."],["CollectionInsertMethodBuilder","Creates a new collection."],["CollectionListMethodBuilder","Retrieves the IDs of all the collections for an enterprise."],["CollectionMethodsBuilder","A builder providing access to all methods supported on *collection* resources. It is not used directly, but through the `AndroidEnterprise` hub."],["CollectionPatchMethodBuilder","Updates a collection. This method supports patch semantics."],["CollectionUpdateMethodBuilder","Updates a collection."],["CollectionViewersListResponse","The user resources for the collection.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * list collectionviewers (response)  "],["CollectionsListResponse","The collection resources for the enterprise.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * list collections (response)  "],["CollectionviewerDeleteMethodBuilder","Removes the user from the list of those specifically allowed to see the collection. If the collection's visibility is set to viewersOnly then only such users will see the collection."],["CollectionviewerGetMethodBuilder","Retrieves the ID of the user if they have been specifically allowed to see the collection. If the collection's visibility is set to viewersOnly then only these users will see the collection."],["CollectionviewerListMethodBuilder","Retrieves the IDs of the users who have been specifically allowed to see the collection. If the collection's visibility is set to viewersOnly then only these users will see the collection."],["CollectionviewerMethodsBuilder","A builder providing access to all methods supported on *collectionviewer* resources. It is not used directly, but through the `AndroidEnterprise` hub."],["CollectionviewerPatchMethodBuilder","Adds the user to the list of those specifically allowed to see the collection. If the collection's visibility is set to viewersOnly then only such users will see the collection. This method supports patch semantics."],["CollectionviewerUpdateMethodBuilder","Adds the user to the list of those specifically allowed to see the collection. If the collection's visibility is set to viewersOnly then only such users will see the collection."],["Device","A device resource represents a mobile device managed by the MDM and belonging to a specific enterprise user.   This collection cannot be modified via the API; it is automatically populated as devices are set up to be managed.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * get devices (response) * get state devices (none) * list devices (none) * set state devices (none)  "],["DeviceGetMethodBuilder","Retrieves the details of a device."],["DeviceGetStateMethodBuilder","Retrieves whether a device is enabled or disabled for access by the user to Google services. The device state takes effect only if enforcing EMM policies on Android devices is enabled in the Google Admin Console. Otherwise, the device state is ignored and all devices are allowed access to Google services."],["DeviceListMethodBuilder","Retrieves the IDs of all of a user's devices."],["DeviceMethodsBuilder","A builder providing access to all methods supported on *device* resources. It is not used directly, but through the `AndroidEnterprise` hub."],["DeviceSetStateMethodBuilder","Sets whether a device is enabled or disabled for access by the user to Google services. The device state takes effect only if enforcing EMM policies on Android devices is enabled in the Google Admin Console. Otherwise, the device state is ignored and all devices are allowed access to Google services."],["DeviceState","The state of a user's device, as accessed by the getState and setState methods on device resources.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * get state devices (response) * set state devices (request|response)  "],["DevicesListResponse","The device resources for the user.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * list devices (response)  "],["Enterprise","An enterprise resource represents a binding between an organisation and their MDM.   To create an enterprise, an admin of the enterprise must first go through a Play for Work sign-up flow. At the end of this the admin will be presented with a token (a short opaque alphanumeric string). They must then present this to the MDM, who then supplies it to the enroll method. Until this is done the MDM will not have any access to the enterprise.   After calling enroll the MDM should call setAccount to specify the service account that will be allowed to act on behalf of the enterprise, which will be required for access to the enterprise's data through this API. Only one call of setAccount is allowed for a given enterprise; the only way to change the account later is to unenroll the enterprise and enroll it again (obtaining a new token).   The MDM can unenroll an enterprise in order to sever the binding between them. Re-enrolling an enterprise is possible, but requires a new token to be retrieved. Enterprises.unenroll requires the MDM's credentials (as enroll does), not the enterprise's. Enterprises.unenroll can only be used for enterprises that were previously enrolled with the enroll call. Any enterprises that were enrolled using the (deprecated) Enterprises.insert call must be unenrolled with Enterprises.delete and can then be re-enrolled using the Enterprises.enroll call.   The ID for an enterprise is an opaque string. It is returned by insert and enroll and can also be retrieved if the enterprise's primary domain is known using the list method.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * insert enterprises (request|response) * list enterprises (none) * unenroll enterprises (none) * set account enterprises (none) * enroll enterprises (request|response) * delete enterprises (none) * get enterprises (response)  "],["EnterpriseAccount","A service account that can be used to authenticate as the enterprise to API calls that require such authentication.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * set account enterprises (request|response)  "],["EnterpriseDeleteMethodBuilder","Deletes the binding between the MDM and enterprise. This is now deprecated; use this to unenroll customers that were previously enrolled with the 'insert' call, then enroll them again with the 'enroll' call."],["EnterpriseEnrollMethodBuilder","Enrolls an enterprise with the calling MDM."],["EnterpriseGetMethodBuilder","Retrieves the name and domain of an enterprise."],["EnterpriseInsertMethodBuilder","Establishes the binding between the MDM and an enterprise. This is now deprecated; use enroll instead."],["EnterpriseListMethodBuilder","Looks up an enterprise by domain name."],["EnterpriseMethodsBuilder","A builder providing access to all methods supported on *enterprise* resources. It is not used directly, but through the `AndroidEnterprise` hub."],["EnterpriseSetAccountMethodBuilder","Set the account that will be used to authenticate to the API as the enterprise."],["EnterpriseUnenrollMethodBuilder","Unenrolls an enterprise from the calling MDM."],["EnterprisesListResponse","The matching enterprise resources.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * list enterprises (response)  "],["Entitlement","The existence of an entitlement resource means that a user has the right to use a particular app on any of their devices. This might be because the app is free or because they have been allocated a license to the app from a group license purchased by the enterprise.   It should always be true that a user has an app installed on one of their devices only if they have an entitlement to it. So if an entitlement is deleted, the app will be uninstalled from all devices. Similarly if the user installs an app (and is permitted to do so), or the MDM triggers an install of the app, an entitlement to that app is automatically created. If this is impossible - e.g. the enterprise has not purchased sufficient licenses - then installation fails.   Note that entitlements are always user specific, not device specific; a user may have an entitlement even though they have not installed the app anywhere. Once they have an entitlement they can install the app on multiple devices.   The API can be used to create an entitlement. If the app is a free app, a group license for that app is created. If it's a paid app, creating the entitlement consumes one license; it remains consumed until the entitlement is removed. Optionally an installation of the app on all the user's managed devices can be triggered at the time the entitlement is created. An entitlement cannot be created for an app if the app requires permissions that the enterprise has not yet accepted.   Entitlements for paid apps that are due to purchases by the user on a non-managed profile will have \"userPurchase\" as entitlement reason; those entitlements cannot be removed via the API.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * patch entitlements (request|response) * list entitlements (none) * delete entitlements (none) * update entitlements (request|response) * get entitlements (response)  "],["EntitlementDeleteMethodBuilder","Removes an entitlement to an app for a user and uninstalls it."],["EntitlementGetMethodBuilder","Retrieves details of an entitlement."],["EntitlementListMethodBuilder","List of all entitlements for the specified user. Only the ID is set."],["EntitlementMethodsBuilder","A builder providing access to all methods supported on *entitlement* resources. It is not used directly, but through the `AndroidEnterprise` hub."],["EntitlementPatchMethodBuilder","Adds or updates an entitlement to an app for a user. This method supports patch semantics."],["EntitlementUpdateMethodBuilder","Adds or updates an entitlement to an app for a user."],["EntitlementsListResponse","The entitlement resources for the user.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * list entitlements (response)  "],["GroupLicense","A group license object indicates a product that an enterprise admin has approved for use in the enterprise. The product may be free or paid. For free products, a group license object is created in these cases: if the enterprise admin approves a product in Google Play, if the product is added to a collection, or if an entitlement for the product is created for a user via the API. For paid products, a group license object is only created as part of the first bulk purchase of that product in Google Play done by the enterprise admin.   The API can be used to query group licenses; the available information includes the total number of licenses purchased (for paid products) and the total number of licenses that have been provisioned, i.e. the total number of user entitlements in existence for the product.   Group license objects are never deleted; if e.g. a free app is added to a collection and then removed, the group license will remain, allowing to keep track of any remaining entitlements. An enterprise admin may indicate they are no longer interested in the group license by marking it as unapproved in Google Play.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * get grouplicenses (response)  "],["GroupLicenseUsersListResponse","The user resources for the group license.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * list grouplicenseusers (response)  "],["GroupLicensesListResponse","The grouplicense resources for the enterprise.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * list grouplicenses (response)  "],["GrouplicenseGetMethodBuilder","Retrieves details of an enterprise's group license for a product."],["GrouplicenseListMethodBuilder","Retrieves IDs of all products for which the enterprise has a group license."],["GrouplicenseMethodsBuilder","A builder providing access to all methods supported on *grouplicense* resources. It is not used directly, but through the `AndroidEnterprise` hub."],["GrouplicenseuserListMethodBuilder","Retrieves the IDs of the users who have been granted entitlements under the license."],["GrouplicenseuserMethodsBuilder","A builder providing access to all methods supported on *grouplicenseuser* resources. It is not used directly, but through the `AndroidEnterprise` hub."],["Install","The existence of an install resource indicates that an app is installed on a particular device (or that an install is pending).   The API can be used to create an install resource using the update method. This triggers the actual install of the app on the device. If the user does not already have an entitlement for the app then an attempt is made to create one. If this fails (e.g. because the app is not free and there is no available license) then the creation of the install fails.   The API can also be used to update an installed app. If the update method is used on an existing install then the app will be updated to the latest available version.   Note that it is not possible to force the installation of a specific version of an app; the version code is read-only.   If a user installs an app themselves (as permitted by the enterprise), then again an install resource and possibly an entitlement resource are automatically created.   The API can also be used to delete an install resource, which triggers the removal of the app from the device. Note that deleting an install does not automatically remove the corresponding entitlement, even if there are no remaining installs. The install resource will also be deleted if the user uninstalls the app themselves.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * patch installs (request|response) * list installs (none) * delete installs (none) * update installs (request|response) * get installs (response)  "],["InstallDeleteMethodBuilder","Requests to remove an app from a device. A call to get or list will still show the app as installed on the device until it is actually removed."],["InstallGetMethodBuilder","Retrieves details of an installation of an app on a device."],["InstallListMethodBuilder","Retrieves the details of all apps installed on the specified device."],["InstallMethodsBuilder","A builder providing access to all methods supported on *install* resources. It is not used directly, but through the `AndroidEnterprise` hub."],["InstallPatchMethodBuilder","Requests to install the latest version of an app to a device. If the app is already installed then it is updated to the latest version if necessary. This method supports patch semantics."],["InstallUpdateMethodBuilder","Requests to install the latest version of an app to a device. If the app is already installed then it is updated to the latest version if necessary."],["InstallsListResponse","The install resources for the device.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * list installs (response)  "],["Permission","A permission represents some extra capability, to be granted to an Android app, which requires explicit consent. An enterprise admin must consent to these permissions on behalf of their users before an entitlement for the app can be created.   The permissions collection is read-only. The information provided for each permission (localized name and description) is intended to be used in the MDM user interface when obtaining consent from the enterprise.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * get permissions (response)  "],["PermissionGetMethodBuilder","Retrieves details of an Android app permission for display to an enterprise admin."],["PermissionMethodsBuilder","A builder providing access to all methods supported on *permission* resources. It is not used directly, but through the `AndroidEnterprise` hub."],["Product","A product represents an app in the Google Play Store that is available to at least some users in the enterprise. (Some apps are restricted to a single enterprise, and no information about them is made available outside that enterprise.)   The information provided for each product (localized name, icon, link to the full Google Play details page) is intended to allow a basic representation of the product within an MDM user interface.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * get products (response) * update permissions products (none) * get app restrictions schema products (none) * get permissions products (none)  "],["ProductGetAppRestrictionsSchemaMethodBuilder","Retrieves the schema defining app restrictions configurable for this product. All products have a schema, but this may be empty if no app restrictions are defined."],["ProductGetMethodBuilder","Retrieves details of a product for display to an enterprise admin."],["ProductGetPermissionMethodBuilder","Retrieves the Android app permissions required by this app."],["ProductMethodsBuilder","A builder providing access to all methods supported on *product* resources. It is not used directly, but through the `AndroidEnterprise` hub."],["ProductPermission","A product permissions resource represents the set of permissions required by a specific app and whether or not they have been accepted by an enterprise admin.   The API can be used to read the set of permissions, and also to update the set to indicate that permissions have been accepted.   This type is not used in any activity, and only used as *part* of another schema.  "],["ProductPermissions","Information about the permissions required by a specific app and whether they have been accepted by the enterprise.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * update permissions products (request|response) * get permissions products (response)  "],["ProductUpdatePermissionMethodBuilder","Updates the set of Android app permissions for this app that have been accepted by the enterprise."],["User","A user resource represents an individual user within the enterprise's domain.   Note that each user is associated with a Google account based on the user's corporate email address (which must be in one of the enterprise's domains). As part of installing an MDM app to manage a device the Google account must be provisioned to the device, and so the user resource must be created before that. This can be done using the Google Admin SDK Directory API.   The ID for a user is an opaque string. It can be retrieved using the list method queried by the user's primary email address.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * revoke token users (none) * update collectionviewers (request|response) * patch collectionviewers (request|response) * list users (none) * get collectionviewers (response) * generate token users (none) * get users (response)  "],["UserGenerateTokenMethodBuilder","Generates a token (activation code) to allow this user to configure their work account in the Android Setup Wizard. Revokes any previously generated token."],["UserGetMethodBuilder","Retrieves a user's details."],["UserListMethodBuilder","Looks up a user by email address."],["UserMethodsBuilder","A builder providing access to all methods supported on *user* resources. It is not used directly, but through the `AndroidEnterprise` hub."],["UserRevokeTokenMethodBuilder","Revokes a previously generated token (activation code) for the user."],["UserToken","A UserToken is used by a user when setting up a managed device or profile with their work account on a device. When the user enters their email address and token (activation code) the appropriate MDM app can be automatically downloaded.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * generate token users (response)  "],["UsersListResponse","The matching user resources.   # Activities   This type is used in activities, which are methods you may call on this type or where this type is involved in.  The list links the activity name, along with information about where it is used (one of *request* and *response*).   * list users (response)  "]],"enum":[["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]]});