initSidebarItems({"struct":[["ApplicationSecret","Represents either 'installed' or 'web' applications in a json secrets file. See `ConsoleApplicationSecret` for more information"],["Authenticator","A generalized authenticator which will keep tokens valid and store them."],["ConsoleApplicationSecret","A type to facilitate reading and writing the json secret file as returned by the google developer console"],["DefaultAuthenticatorDelegate","Uses all default implementations by AuthenticatorDelegate, and makes the trait's implementation usable in the first place."],["DeviceFlow","Implements the Oauth2 Device Flow It operates in two steps: * obtain a code to show to the user * (repeatedly) poll for the user to authenticate your application"],["MemoryStorage","A storage that remembers values for one session only."],["NullStorage","A storage that remembers nothing."],["PollInformation","Contains state of pending authentication requests"],["RefreshFlow","Implements the Outh2 Refresh Token Flow.   Refresh an expired access token, as obtained by any other authentication flow. This flow is useful when your `Token` is expired and allows to obtain a new and valid access token."],["Token","Represents a token as returned by OAuth2 servers."]],"enum":[["FlowType","All known authentication types, for suitable constants"],["PollResult","Encapsulates all possible results of a `poll_token(...)` operation"],["RefreshResult","All possible outcomes of the refresh flow"],["Retry","A utility type to indicate how operations DeviceFlowHelper operations should be retried"]],"trait":[["AuthenticatorDelegate","A partially implemented trait to interact with the `Authenticator`   The only method that needs to be implemented manually is `present_user_code(...)`, as no assumptions are made on how this presentation should happen."],["GetToken","A provider for authorization tokens, yielding tokens valid for a given scope. The `api_key()` method is an alternative in case there are no scopes or if no user is involved."],["TokenStorage","Implements a specialised storage to set and retrieve `Token` instances. The `scope_hash` represents the signature of the scopes for which the given token should be stored or retrieved."]]});